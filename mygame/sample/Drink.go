// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package sample

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type DrinkT struct {
	Name string `json:"name"`
	Taste string `json:"taste"`
}

func (t *DrinkT) Pack(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	if t == nil { return 0 }
	nameOffset := flatbuffers.UOffsetT(0)
	if t.Name != "" {
		nameOffset = builder.CreateString(t.Name)
	}
	tasteOffset := flatbuffers.UOffsetT(0)
	if t.Taste != "" {
		tasteOffset = builder.CreateString(t.Taste)
	}
	DrinkStart(builder)
	DrinkAddName(builder, nameOffset)
	DrinkAddTaste(builder, tasteOffset)
	return DrinkEnd(builder)
}

func (rcv *Drink) UnPackTo(t *DrinkT) {
	t.Name = string(rcv.Name())
	t.Taste = string(rcv.Taste())
}

func (rcv *Drink) UnPack() *DrinkT {
	if rcv == nil { return nil }
	t := &DrinkT{}
	rcv.UnPackTo(t)
	return t
}

type Drink struct {
	_tab flatbuffers.Table
}

func GetRootAsDrink(buf []byte, offset flatbuffers.UOffsetT) *Drink {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &Drink{}
	x.Init(buf, n+offset)
	return x
}

func GetSizePrefixedRootAsDrink(buf []byte, offset flatbuffers.UOffsetT) *Drink {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &Drink{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func (rcv *Drink) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *Drink) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *Drink) Name() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *Drink) Taste() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func DrinkStart(builder *flatbuffers.Builder) {
	builder.StartObject(2)
}
func DrinkAddName(builder *flatbuffers.Builder, name flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(0, flatbuffers.UOffsetT(name), 0)
}
func DrinkAddTaste(builder *flatbuffers.Builder, taste flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(taste), 0)
}
func DrinkEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
